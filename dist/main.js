/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function() {

eval("let playerState = 'idle';\nconst dropDown = document.getElementById(\"animations\");\ndropDown.addEventListener('change', function (e) {\n  playerState = e.target.value;\n});\nconst canvas = document.querySelector('canvas');\nconst c = canvas.getContext('2d');\nconst CANVAS_WIDTH = canvas.width = 600;\nconst CANVAS_HEIGHT = canvas.width = 600;\n\n// const playerImage = new Image();\n// playerImage.src = './src/images/shadow_dog.png'\n\nconst spriteWidth = 575;\nconst spriteHeight = 523;\nlet gameSpeed = 5;\nconst backgroundlayer1 = new Image(); //same as getElementByImage()\n// backgroundlayer1.src = '../src/images/sun.png'\nconst backgroundlayer2 = new Image();\nbackgroundlayer2.src = '../src/images/2.png';\nconst backgroundlayer3 = new Image();\nbackgroundlayer3.src = '../src/images/3.png';\nconst backgroundlayer4 = new Image();\nbackgroundlayer4.src = '../src/images/4.png';\nconst plateformImage = new Image();\nplateformImage.src = '../src/images/background.png';\n\n//changes sprite frame\nlet gameframe = 0;\nconst staggerFrames = 5;\nconst spriteAnimations = [];\nconst animationStates = [{\n  name: 'idle',\n  frames: 7\n}, {\n  name: 'jump',\n  frames: 7\n}, {\n  name: 'fall',\n  frames: 7\n}, {\n  name: 'run',\n  frames: 9\n}, {\n  name: 'dizzy',\n  frames: 5\n}, {\n  name: 'sit',\n  frames: 5\n}, {\n  name: 'roll',\n  frames: 7\n}, {\n  name: 'bite',\n  frames: 7\n}, {\n  name: 'ko',\n  frames: 10\n}, {\n  name: 'gethit',\n  frames: 4\n}];\nanimationStates.forEach((state, index) => {\n  let frames = {\n    loc: []\n  };\n  for (let j = 0; j < state.frames; j++) {\n    let positionX = j * spriteWidth;\n    let positionY = index * spriteHeight;\n    frames.loc.push({\n      x: positionX,\n      y: positionY\n    });\n  }\n  spriteAnimations[state.name] = frames;\n});\nconsole.log(spriteAnimations);\nconst gravity = 1.9;\nclass Player {\n  constructor() {\n    this.position = {\n      x: 100,\n      y: 250\n    };\n    //player size\n    this.width = 150;\n    this.height = 150;\n    //gravity\n    //later we can implement code where if\n    //in a space level, we turn the gravity off\n    this.velocity = {\n      x: 0,\n      y: 0\n    };\n  }\n  draw() {\n    const playerImage = new Image();\n    playerImage.src = './src/images/shadow_dog.png';\n    let position = Math.floor(gameframe / staggerFrames) % spriteAnimations[playerState].loc.length;\n    let frameX = spriteWidth * position;\n    let frameY = spriteAnimations[playerState].loc[position].y;\n    // c.drawImage(playerImage, this.position.x, this.position.y, this.width, this.height)\n    //1: where sprite sheet starts(x coord),2: y coord,\n    //3: x coord where it finishes on the sprite sheet\n    //4: y coord where it finishes on the sprite sheet, 5: start x coord on canvas.\n    //6: start and y on canvas, 7: finishing x coord on canvas\n    //8: finishing y, canvas\n\n    c.drawImage(playerImage, frameX, frameY, spriteWidth, spriteHeight, this.position.x, this.position.y, this.width, this.height);\n    gameframe++;\n    // c.fillStyle = \"aqua\"\n    // c.fillRect(this.position.x, this.position.y, this.width, this.height)\n  }\n\n  update() {\n    this.draw();\n    this.position.y += this.velocity.y;\n    this.position.x += this.velocity.x;\n    console.log(this.position.x);\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      this.velocity.y += gravity;\n    } else if (this.position.y >= 600) {\n      [this.position.x, this.position.y] = [100, 250];\n      scrollOffset = 0;\n    }\n    // this.velocity.y += gravity\n  }\n}\n\nclass Platform {\n  constructor(_ref) {\n    let {\n      x,\n      y\n    } = _ref;\n    this.position = {\n      x,\n      y\n    };\n    this.width = 300;\n    this.height = 300;\n  }\n  draw() {\n    // c.fillStyle = \"white\"\n    c.drawImage(plateformImage, this.position.x, this.position.y, this.width, this.height);\n  }\n  update() {\n    c.draw();\n    c.update();\n  }\n}\nconst player = new Player();\n// const platform = new Platform()\nconst platforms = [new Platform({\n  x: 0,\n  y: 500\n}),, new Platform({\n  x: 450,\n  y: 500\n})\n// , new Platform({\n//     x: 450, y: 350\n// })\n, new Platform({\n  x: 1400,\n  y: 500\n}), new Platform({\n  x: 2000,\n  y: 350\n})];\nconst keys = {\n  right: {\n    pressed: false\n  },\n  left: {\n    pressed: false\n  },\n  space: {\n    pressed: false\n  }\n};\nvar scrollOffset = 0;\nclass layer {\n  constructor(image, speedModifier) {\n    this.x = 0;\n    this.y = 0;\n    this.width = 600;\n    this.height = 800;\n    this.x2 = this.width;\n    this.image = image;\n    this.speedModifier = speedModifier;\n    this.speed = gameSpeed * this.speedModifier;\n  }\n  update() {\n    this.speed = gameSpeed * this.speedModifier;\n    if (this.x <= -this.width) {\n      this.x = this.width + this.x2 - this.speed;\n    }\n    if (this.x2 <= -this.width) {\n      this.x2 = this.width + this.x - this.speed;\n    }\n    this.x = Math.floor(this.x - this.speed);\n    this.x2 = Math.floor(this.x2 - this.speed);\n  }\n  draw() {\n    c.drawImage(this.image, this.x, this.y, this.width, this.height);\n    c.drawImage(this.image, this.x2, this.y, this.width, this.height);\n  }\n}\n\n// const layer1 = new layer(backgroundlayer1, 1)\nconst layer2 = new layer(backgroundlayer2, 1);\nconst layer3 = new layer(backgroundlayer3, 1);\nconst layer4 = new layer(backgroundlayer4, 1);\nfunction animate() {\n  c.clearRect(0, 0, CANVAS_HEIGHT, CANVAS_WIDTH);\n  // layer1.update();\n  // layer1.draw();\n  layer2.update();\n  layer2.draw();\n  layer3.update();\n  layer3.draw();\n  layer4.update();\n  layer4.draw();\n  // let position = Math.floor(gameframe / staggerFrames) % spriteAnimations[playerState].loc.length\n  // let frameX = spriteWidth * position\n  // let frameY = spriteAnimations[playerState].loc[position].y\n  platforms.forEach(platform => {\n    platform.draw();\n  });\n  player.update();\n  requestAnimationFrame(animate);\n  if (keys.right.pressed && player.position.x < 400) {\n    player.velocity.x = 5;\n  } else if (keys.left.pressed && player.position.x > 100) {\n    player.velocity.x = -5;\n  } else if (keys.space.pressed && player.position.x > 100) {\n    player.velocity.y += 10;\n  } else {\n    player.velocity.x = 0;\n    if (keys.right.pressed) {\n      //makes platforms scroll\n      scrollOffset += 5;\n      platforms.forEach(platform => {\n        platform.position.x -= 5;\n      });\n    } else if (keys.left.pressed) {\n      scrollOffset -= 5;\n      platforms.forEach(platform => {\n        platform.position.x += 5;\n      });\n    } else if (keys.right.pressed) {\n      //makes platforms scroll\n      scrollOffset += 5;\n      platforms.forEach(platform => {\n        platform.position.x -= 5;\n      });\n    }\n    // console.log(scrollOffset)\n  }\n\n  // platform collision detecion\n  platforms.forEach(platform => {\n    if (player.position.y + player.height <= platform.position.y && player.position.y + player.height + player.velocity.y >= platform.position.y && player.position.x + player.width >= platform.position.x && player.position.x <= platform.position.x + platform.width) {\n      player.velocity.y = 0;\n    }\n  });\n  //win condition\n  if (scrollOffset > 2190) {\n    console.log(\"you Win\");\n  }\n  // lose condition\n  if (player.position.y > canvas.height) {\n    console.log('you lose');\n  }\n}\nanimate();\n\n//keyCode is the number that you get when you press a key in the console\nwindow.addEventListener(\"keydown\", _ref2 => {\n  let {\n    keyCode\n  } = _ref2;\n  console.log(keyCode);\n  switch (keyCode) {\n    case 68:\n      console.log(\"right\");\n      player.velocity.x = 1;\n      keys.right.pressed = true;\n      break;\n    case 65:\n      console.log(\"left\");\n      keys.left.pressed = true;\n      player.velocity.x = -1;\n      break;\n    case 87:\n      console.log(\"up\");\n      player.velocity.y -= 20;\n      break;\n    case 83:\n      console.log(\"down\");\n      player.velocity.y += 20;\n      break;\n    case 32:\n      console.log(\"space\");\n      keys.space.pressed = true;\n      player.velocity.x += 10;\n      break;\n  }\n  console.log(keys.right.pressed);\n});\nwindow.addEventListener(\"keyup\", _ref3 => {\n  let {\n    keyCode\n  } = _ref3;\n  // console.log(keyCode)\n  switch (keyCode) {\n    case 68:\n      console.log(\"right\");\n      keys.right.pressed = false;\n      player.velocity.x = 0;\n      break;\n    case 65:\n      console.log(\"left\");\n      keys.left.pressed = false;\n      player.velocity.x = 0;\n      break;\n    case 87:\n      console.log(\"up\");\n      player.velocity.y -= 20;\n      break;\n    case 83:\n      console.log(\"down\");\n      player.velocity.y += 20;\n      break;\n    case 32:\n      console.log(\"space\");\n      keys.space.pressed = false;\n      player.gravity = 0;\n      break;\n  }\n  console.log(keys.right.pressed);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teWpzcC8uL3NyYy9pbmRleC5zY3NzPzk3NDUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./src/index.js"](0, {}, __webpack_require__);
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.scss"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;