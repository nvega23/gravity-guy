/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function() {

eval("let playerState = 'idle';\nconst dropDown = document.getElementById(\"animations\");\ndropDown.addEventListener('change', function (e) {\n  playerState = e.target.value;\n});\nconst canvas = document.querySelector('canvas');\nconst c = canvas.getContext('2d');\nconst CANVAS_WIDTH = canvas.width = 600;\nconst CANVAS_HEIGHT = canvas.width = 600;\nconst playerImage = new Image();\nplayerImage.src = './src/images/shadow_dog.png';\nconst spriteWidth = 575;\nconst spriteHeight = 523;\nlet gameSpeed = 5;\nconst backgroundlayer1 = new Image(); //same as getElementByImage()\nbackgroundlayer1.src = '../src/images/nestor.png';\nconst plateformImage = new Image();\nplateformImage.src = '../src/images/background.png';\n\n//changes sprite frame\nlet gameframe = 0;\nconst staggerFrames = 5;\nconst spriteAnimations = [];\nconst animationStates = [{\n  name: 'idle',\n  frames: 7\n}, {\n  name: 'jump',\n  frames: 7\n}, {\n  name: 'fall',\n  frames: 7\n}, {\n  name: 'run',\n  frames: 9\n}, {\n  name: 'dizzy',\n  frames: 5\n}, {\n  name: 'sit',\n  frames: 5\n}, {\n  name: 'roll',\n  frames: 7\n}, {\n  name: 'bite',\n  frames: 7\n}, {\n  name: 'ko',\n  frames: 10\n}, {\n  name: 'gethit',\n  frames: 4\n}];\nanimationStates.forEach((state, index) => {\n  let frames = {\n    loc: []\n  };\n  for (let j = 0; j < state.frames; j++) {\n    let positionX = j * spriteWidth;\n    let positionY = index * spriteHeight;\n    frames.loc.push({\n      x: positionX,\n      y: positionY\n    });\n  }\n  spriteAnimations[state.name] = frames;\n});\nconsole.log(spriteAnimations);\nconst gravity = 1.9;\nclass Player {\n  constructor() {\n    this.position = {\n      x: 100,\n      y: 350\n    };\n    //player size\n    this.width = 30;\n    this.height = 30;\n    //gravity\n    //later we can implement code where if\n    //in a space level, we turn the gravity off\n    this.velocity = {\n      x: 0,\n      y: 0\n    };\n  }\n  draw() {\n    c.clearRect(0, 0, CANVAS_HEIGHT, CANVAS_WIDTH);\n    let position = Math.floor(gameframe / staggerFrames) % spriteAnimations[playerState].loc.length;\n    let frameX = spriteWidth * position;\n    let frameY = spriteAnimations[playerState].loc[position].y;\n    c.drawImage(backgroundlayer1, 0, 0);\n    c.drawImage(playerImage, frameX, frameY, spriteWidth, spriteHeight, 0, 0, spriteWidth, spriteHeight);\n    gameframe++;\n    // c.fillStyle = \"aqua\"\n    // c.fillRect(this.position.x, this.position.y, this.width, this.height)\n  }\n\n  update() {\n    this.draw();\n    this.position.y += this.velocity.y;\n    this.position.x += this.velocity.x;\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n    // this.velocity.y += gravity\n  }\n}\n\nclass Platform {\n  constructor(_ref) {\n    let {\n      x,\n      y\n    } = _ref;\n    this.position = {\n      x,\n      y\n    };\n    this.width = 280;\n    this.height = 150;\n  }\n  draw() {\n    c.fillStyle = \"gray\";\n    c.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\nconst player = new Player();\n// const platform = new Platform()\nconst platforms = [\n// new Platform({\n// x: 250, y: 25}),\nnew Platform({\n  x: 0,\n  y: 525\n}), new Platform({\n  x: 258,\n  y: 500\n}), new Platform({\n  x: 1030,\n  y: 500\n}), new Platform({\n  x: 700,\n  y: 525\n})];\nconst keys = {\n  right: {\n    pressed: false\n  },\n  left: {\n    pressed: false\n  },\n  space: {\n    pressed: false\n  }\n};\nlet scrollOffset = 0;\nlet x = 0;\nfunction animate() {\n  c.clearRect(0, 0, CANVAS_HEIGHT, CANVAS_WIDTH);\n  let position = Math.floor(gameframe / staggerFrames) % spriteAnimations[playerState].loc.length;\n  let frameX = spriteWidth * position;\n  let frameY = spriteAnimations[playerState].loc[position].y;\n  c.drawImage(backgroundlayer1, x, 0);\n  x--;\n  c.drawImage(playerImage, frameX, frameY, spriteWidth, spriteHeight, 0, 0, spriteWidth, spriteHeight);\n  gameframe++;\n  player.update();\n  platforms.forEach(platform => {\n    platform.draw();\n  });\n  requestAnimationFrame(animate);\n  if (keys.right.pressed && player.position.x < 400) {\n    player.velocity.x = 5;\n  } else if (keys.left.pressed && player.position.x > 100) {\n    player.velocity.x = -5;\n  } else if (keys.space.pressed && player.position.x > 100) {\n    player.velocity.y += 10;\n  } else {\n    player.velocity.x = 0;\n    if (keys.right.pressed) {\n      //makes platforms scroll\n      scrollOffset += 5;\n      platforms.forEach(platform => {\n        platform.position.x -= 5;\n      });\n    } else if (keys.left.pressed) {\n      scrollOffset -= 5;\n      platforms.forEach(platform => {\n        platform.position.x += 5;\n      });\n    } else if (keys.right.pressed) {\n      //makes platforms scroll\n      scrollOffset += 5;\n      platforms.forEach(platform => {\n        platform.position.x -= 5;\n      });\n    }\n    console.log(scrollOffset);\n  }\n\n  // platform collision detecion\n  platforms.forEach(platform => {\n    if (player.position.y + player.height <= platform.position.y && player.position.y + player.height + player.velocity.y >= platform.position.y && player.position.x + player.width >= platform.position.x && player.position.x <= platform.position.x + platform.width) {\n      player.velocity.y = 0;\n    }\n  });\n  if (scrollOffset > 2190) {\n    console.log(\"you Win\");\n  }\n}\nanimate();\n\n//keyCode is the number that you get when you press a key in the console\nwindow.addEventListener(\"keydown\", _ref2 => {\n  let {\n    keyCode\n  } = _ref2;\n  console.log(keyCode);\n  switch (keyCode) {\n    case 68:\n      console.log(\"right\");\n      player.velocity.x = 1;\n      keys.right.pressed = true;\n      break;\n    case 65:\n      console.log(\"left\");\n      keys.left.pressed = true;\n      player.velocity.x = -1;\n      break;\n    case 87:\n      console.log(\"up\");\n      player.velocity.y -= 20;\n      break;\n    case 83:\n      console.log(\"down\");\n      player.velocity.y += 20;\n      break;\n    case 32:\n      console.log(\"space\");\n      keys.space.pressed = true;\n      player.velocity.x += 10;\n      break;\n  }\n  console.log(keys.right.pressed);\n});\nwindow.addEventListener(\"keyup\", _ref3 => {\n  let {\n    keyCode\n  } = _ref3;\n  // console.log(keyCode)\n  switch (keyCode) {\n    case 68:\n      console.log(\"right\");\n      keys.right.pressed = false;\n      player.velocity.x = 0;\n      break;\n    case 65:\n      console.log(\"left\");\n      keys.left.pressed = false;\n      player.velocity.x = 0;\n      break;\n    case 87:\n      console.log(\"up\");\n      player.velocity.y -= 20;\n      break;\n    case 83:\n      console.log(\"down\");\n      player.velocity.y += 20;\n      break;\n    case 32:\n      console.log(\"space\");\n      keys.space.pressed = false;\n      player.gravity = 0;\n      break;\n  }\n  console.log(keys.right.pressed);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teWpzcC8uL3NyYy9pbmRleC5zY3NzPzk3NDUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./src/index.js"](0, {}, __webpack_require__);
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.scss"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;